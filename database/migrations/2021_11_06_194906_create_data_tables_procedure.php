<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Support\Facades\DB;

class CreateDataTablesProcedure extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        DB::unprepared("DROP PROCEDURE IF EXISTS DataTablesCantidadListarLibros");
        DB::unprepared("CREATE PROCEDURE DataTablesCantidadListarLibros(IN texto VARCHAR(50)) BEGIN PREPARE stmt FROM CONCAT(\"SELECT COUNT(libros.id) AS cantidad FROM libros INNER JOIN editoriales ON editoriales.id = libros.editorial_id INNER JOIN idiomas ON idiomas.id = libros.idioma_id WHERE libros.titulo LIKE '%\",texto,\"%' OR libros.anyo_de_lanzamiento LIKE '%\",texto,\"%' OR idiomas.idioma LIKE '%\",texto,\"%' OR editoriales.editorial LIKE '%\",texto,\"%' OR libros.fecha_registro LIKE '%\",texto,\"%'\"); EXECUTE stmt; DEALLOCATE PREPARE stmt; END");

        DB::unprepared("DROP PROCEDURE IF EXISTS DataTablesListarLibros");
        DB::unprepared("CREATE PROCEDURE DataTablesListarLibros(IN texto VARCHAR(50), IN columna VARCHAR(50), IN sentido VARCHAR(5), IN saltar INT, IN tomar INT) BEGIN PREPARE stmt FROM CONCAT(\"SELECT libros.id, libros.titulo, libros.titulo_slug, libros.anyo_de_lanzamiento, libros.fecha_registro, libros.imagen, libros.editorial_id, editoriales.editorial, libros.idioma_id, idiomas.idioma, GROUP_CONCAT(DISTINCT autores.id) AS autor_id, GROUP_CONCAT(DISTINCT CONCAT(autores.nombre, ' ', autores.apellido) SEPARATOR ', ') AS autores, GROUP_CONCAT(DISTINCT sub_clasificaciones.id) AS sub_clasificacion_id, GROUP_CONCAT(DISTINCT sub_clasificaciones.sub_clasificacion SEPARATOR ', ') AS sub_clasificaciones FROM libros INNER JOIN editoriales ON editoriales.id = libros.editorial_id INNER JOIN idiomas ON idiomas.id = libros.idioma_id LEFT JOIN libros_x_autores ON libros.id = libros_x_autores.libro_id LEFT JOIN autores ON autores.id = libros_x_autores.autor_id LEFT JOIN libros_x_sub_clasificaciones ON libros_x_sub_clasificaciones.libro_id = libros.id LEFT JOIN sub_clasificaciones ON sub_clasificaciones.id = libros_x_sub_clasificaciones.sub_clasificacion_id WHERE libros.titulo LIKE '%\",texto,\"%' OR libros.anyo_de_lanzamiento LIKE '%\",texto,\"%' OR idiomas.idioma LIKE '%\",texto,\"%' OR editoriales.editorial LIKE '%\",texto,\"%' OR libros.fecha_registro LIKE '%\",texto,\"%' GROUP BY id, titulo, titulo_slug, anyo_de_lanzamiento, fecha_registro, imagen, editorial_id, editorial, idioma_id, idioma ORDER BY \",columna,\" \",sentido,\" LIMIT \",saltar,\",\",tomar); EXECUTE stmt; DEALLOCATE PREPARE stmt; END");

        DB::unprepared("DROP PROCEDURE IF EXISTS DataTablesCantidadListarUsuarios");
        DB::unprepared("CREATE PROCEDURE DataTablesCantidadListarUsuarios(IN texto VARCHAR(50)) BEGIN PREPARE stmt FROM CONCAT(\"SELECT COUNT(usuarios.id) AS cantidad FROM usuarios INNER JOIN estados_de_los_usuarios ON estados_de_los_usuarios.id = usuarios.estado_del_usuario_id INNER JOIN generos ON generos.id = usuarios.genero_id LEFT JOIN model_has_roles ON model_has_roles.model_id = usuarios.id LEFT JOIN roles ON roles.id = model_has_roles.role_id WHERE usuarios.name LIKE '%\",texto,\"%' OR usuarios.last_name LIKE '%\",texto,\"%' OR usuarios.dni LIKE '%\",texto,\"%' OR usuarios.fecha_registro LIKE '%\",texto,\"%' OR estados_de_los_usuarios.estado_del_usuario LIKE '%\",texto,\"%' OR roles.name LIKE '%\",texto,\"%'\"); EXECUTE stmt; DEALLOCATE PREPARE stmt; END");

        DB::unprepared("DROP PROCEDURE IF EXISTS DataTablesListarUsuarios");
        DB::unprepared("CREATE PROCEDURE DataTablesListarUsuarios(IN texto VARCHAR(50), IN columna VARCHAR(50), IN sentido VARCHAR(5), IN saltar INT, IN tomar INT) BEGIN PREPARE stmt FROM CONCAT(\"SELECT usuarios.id, usuarios.name, usuarios.last_name, usuarios.email, usuarios.dni, usuarios.celular, usuarios.imagen, usuarios.fecha_registro, usuarios.estado_del_usuario_id, estados_de_los_usuarios.estado_del_usuario, usuarios.genero_id, generos.genero,roles.id AS role_id, roles.name AS rol FROM usuarios INNER JOIN estados_de_los_usuarios ON estados_de_los_usuarios.id = usuarios.estado_del_usuario_id INNER JOIN generos ON generos.id = usuarios.genero_id LEFT JOIN model_has_roles ON model_has_roles.model_id = usuarios.id LEFT JOIN roles ON roles.id = model_has_roles.role_id WHERE usuarios.name LIKE '%\",texto,\"%' OR usuarios.last_name LIKE '%\",texto,\"%' OR usuarios.dni LIKE '%\",texto,\"%' OR usuarios.fecha_registro LIKE '%\",texto,\"%' OR estados_de_los_usuarios.estado_del_usuario LIKE '%\",texto,\"%' OR roles.name LIKE '%\",texto,\"%' ORDER BY \",columna,\" \",sentido,\" LIMIT \",saltar,\",\",tomar); EXECUTE stmt; DEALLOCATE PREPARE stmt; END");

        DB::unprepared("DROP PROCEDURE IF EXISTS DataTablesCantidadListarEjemplaresDelLibroPorID");
        DB::unprepared("CREATE PROCEDURE DataTablesCantidadListarEjemplaresDelLibroPorID(IN libro_id INT, IN texto VARCHAR(50)) BEGIN PREPARE stmt FROM CONCAT(\"SELECT COUNT(resultados.id) AS cantidad FROM (SELECT ejemplares.id, ejemplares.libro_id, CONCAT(ejemplares.libro_id,'-',ejemplares.id,' ',libros.titulo) AS libro, ejemplares.estado_del_ejemplar_id, estados_de_los_ejemplares.estado_del_ejemplar, GROUP_CONCAT(DISTINCT estados_fisicos_de_los_ejemplares.id) AS estado_fisico_del_ejemplar_id, GROUP_CONCAT(DISTINCT estados_fisicos_de_los_ejemplares.estado_fisico_del_ejemplar SEPARATOR ', ') AS estado_fisico_del_ejemplar FROM ejemplares INNER JOIN estados_de_los_ejemplares ON estados_de_los_ejemplares.id = ejemplares.estado_del_ejemplar_id INNER JOIN libros ON libros.id = ejemplares.libro_id LEFT JOIN ejemplares_x_estados_fisicos_de_los_ejemplares ON ejemplares_x_estados_fisicos_de_los_ejemplares.ejemplar_id = ejemplares.id LEFT JOIN estados_fisicos_de_los_ejemplares ON estados_fisicos_de_los_ejemplares.id = ejemplares_x_estados_fisicos_de_los_ejemplares.estado_fisico_del_ejemplar_id WHERE ejemplares.libro_id = \",libro_id,\" GROUP BY id, libro_id, libro, estado_del_ejemplar_id, estado_del_ejemplar HAVING libro LIKE '%\",texto,\"%' OR estado_del_ejemplar LIKE '%\",texto,\"%' OR estado_fisico_del_ejemplar LIKE '%\",texto,\"%') AS resultados\"); EXECUTE stmt; DEALLOCATE PREPARE stmt; END");

        DB::unprepared("DROP PROCEDURE IF EXISTS DataTablesListarEjemplaresDelLibroPorID");
        DB::unprepared("CREATE PROCEDURE DataTablesListarEjemplaresDelLibroPorID(IN libro_id INT, IN texto VARCHAR(50), IN columna VARCHAR(50), IN sentido VARCHAR(5), IN saltar INT, IN tomar INT) BEGIN PREPARE stmt FROM CONCAT(\"SELECT ejemplares.id, ejemplares.libro_id, CONCAT(ejemplares.libro_id,'-',ejemplares.id,' ',libros.titulo) AS libro, ejemplares.estado_del_ejemplar_id, estados_de_los_ejemplares.estado_del_ejemplar, GROUP_CONCAT(DISTINCT estados_fisicos_de_los_ejemplares.id) AS estado_fisico_del_ejemplar_id, GROUP_CONCAT(DISTINCT estados_fisicos_de_los_ejemplares.estado_fisico_del_ejemplar SEPARATOR ', ') AS estado_fisico_del_ejemplar FROM ejemplares INNER JOIN estados_de_los_ejemplares ON estados_de_los_ejemplares.id = ejemplares.estado_del_ejemplar_id INNER JOIN libros ON libros.id = ejemplares.libro_id LEFT JOIN ejemplares_x_estados_fisicos_de_los_ejemplares ON ejemplares_x_estados_fisicos_de_los_ejemplares.ejemplar_id = ejemplares.id LEFT JOIN estados_fisicos_de_los_ejemplares ON estados_fisicos_de_los_ejemplares.id = ejemplares_x_estados_fisicos_de_los_ejemplares.estado_fisico_del_ejemplar_id WHERE ejemplares.libro_id = \",libro_id,\" GROUP BY id, libro_id, libro, estado_del_ejemplar_id, estado_del_ejemplar HAVING libro LIKE '%\",texto,\"%' OR estado_del_ejemplar LIKE '%\",texto,\"%' OR estado_fisico_del_ejemplar LIKE '%\",texto,\"%' ORDER BY \",columna,\" \",sentido,\" LIMIT \",saltar,\",\",tomar); EXECUTE stmt; DEALLOCATE PREPARE stmt; END");

        DB::unprepared("DROP PROCEDURE IF EXISTS DataTablesCantidadListarUsuariosHabilitados");
        DB::unprepared("CREATE PROCEDURE DataTablesCantidadListarUsuariosHabilitados(IN texto VARCHAR(50)) BEGIN PREPARE stmt FROM CONCAT(\"SELECT COUNT(usuarios.id) AS cantidad FROM usuarios LEFT JOIN model_has_roles ON model_has_roles.model_id = usuarios.id LEFT JOIN roles ON roles.id = model_has_roles.role_id WHERE usuarios.estado_del_usuario_id = 1 AND (usuarios.name LIKE '%\",texto,\"%' OR usuarios.last_name LIKE '%\",texto,\"%' OR roles.name LIKE '%\",texto,\"%')\"); EXECUTE stmt; DEALLOCATE PREPARE stmt; END");

        DB::unprepared("DROP PROCEDURE IF EXISTS DataTablesListarUsuariosHabilitados");
        DB::unprepared("CREATE PROCEDURE DataTablesListarUsuariosHabilitados(IN texto VARCHAR(50), IN columna VARCHAR(50), IN sentido VARCHAR(5), IN saltar INT, IN tomar INT) BEGIN PREPARE stmt FROM CONCAT(\"SELECT usuarios.id, usuarios.name, usuarios.last_name, roles.id AS role_id, roles.name AS rol FROM usuarios LEFT JOIN model_has_roles ON model_has_roles.model_id = usuarios.id LEFT JOIN roles ON roles.id = model_has_roles.role_id WHERE usuarios.estado_del_usuario_id = 1 AND (usuarios.name LIKE '%\",texto,\"%' OR usuarios.last_name LIKE '%\",texto,\"%' OR roles.name LIKE '%\",texto,\"%') ORDER BY \",columna,\" \",sentido,\" LIMIT \",saltar,\",\",tomar);
        EXECUTE stmt; DEALLOCATE PREPARE stmt; END");

        DB::unprepared("DROP PROCEDURE IF EXISTS DataTablesCantidadListarEjemplaresDisponiblesDelLibroPorID");
        DB::unprepared("CREATE PROCEDURE DataTablesCantidadListarEjemplaresDisponiblesDelLibroPorID(IN libro_id INT, IN texto VARCHAR(50)) BEGIN PREPARE stmt FROM CONCAT(\"SELECT COUNT(resultados.id) AS cantidad FROM (SELECT ejemplares.id, ejemplares.libro_id, CONCAT(ejemplares.libro_id,'-',ejemplares.id,' ',libros.titulo) AS libro, ejemplares.estado_del_ejemplar_id, estados_de_los_ejemplares.estado_del_ejemplar, GROUP_CONCAT(DISTINCT estados_fisicos_de_los_ejemplares.id) AS estado_fisico_del_ejemplar_id, GROUP_CONCAT(DISTINCT estados_fisicos_de_los_ejemplares.estado_fisico_del_ejemplar SEPARATOR ', ') AS estado_fisico_del_ejemplar FROM ejemplares INNER JOIN estados_de_los_ejemplares ON estados_de_los_ejemplares.id = ejemplares.estado_del_ejemplar_id INNER JOIN libros ON libros.id = ejemplares.libro_id LEFT JOIN ejemplares_x_estados_fisicos_de_los_ejemplares ON ejemplares_x_estados_fisicos_de_los_ejemplares.ejemplar_id = ejemplares.id LEFT JOIN estados_fisicos_de_los_ejemplares ON estados_fisicos_de_los_ejemplares.id = ejemplares_x_estados_fisicos_de_los_ejemplares.estado_fisico_del_ejemplar_id WHERE ejemplares.libro_id = \",libro_id,\" AND ejemplares.estado_del_ejemplar_id = 1 GROUP BY id, libro_id, libro, estado_del_ejemplar_id, estado_del_ejemplar HAVING libro LIKE '%\",texto,\"%' OR estado_del_ejemplar LIKE '%\",texto,\"%' OR estado_fisico_del_ejemplar LIKE '%\",texto,\"%') AS resultados\"); EXECUTE stmt; DEALLOCATE PREPARE stmt; END");

        DB::unprepared("DROP PROCEDURE IF EXISTS DataTablesListarEjemplaresDisponiblesDelLibroPorID");
        DB::unprepared("CREATE PROCEDURE DataTablesListarEjemplaresDisponiblesDelLibroPorID(IN libro_id INT, IN texto VARCHAR(50), IN columna VARCHAR(50), IN sentido VARCHAR(5), IN saltar INT, IN tomar INT) BEGIN PREPARE stmt FROM CONCAT(\"SELECT ejemplares.id, ejemplares.libro_id, CONCAT(ejemplares.libro_id,'-',ejemplares.id,' ',libros.titulo) AS libro, ejemplares.estado_del_ejemplar_id, estados_de_los_ejemplares.estado_del_ejemplar, GROUP_CONCAT(DISTINCT estados_fisicos_de_los_ejemplares.id) AS estado_fisico_del_ejemplar_id, GROUP_CONCAT(DISTINCT estados_fisicos_de_los_ejemplares.estado_fisico_del_ejemplar SEPARATOR ', ') AS estado_fisico_del_ejemplar FROM ejemplares INNER JOIN estados_de_los_ejemplares ON estados_de_los_ejemplares.id = ejemplares.estado_del_ejemplar_id INNER JOIN libros ON libros.id = ejemplares.libro_id LEFT JOIN ejemplares_x_estados_fisicos_de_los_ejemplares ON ejemplares_x_estados_fisicos_de_los_ejemplares.ejemplar_id = ejemplares.id LEFT JOIN estados_fisicos_de_los_ejemplares ON estados_fisicos_de_los_ejemplares.id = ejemplares_x_estados_fisicos_de_los_ejemplares.estado_fisico_del_ejemplar_id WHERE ejemplares.libro_id = \",libro_id,\" AND ejemplares.estado_del_ejemplar_id = 1 GROUP BY id, libro_id, libro, estado_del_ejemplar_id, estado_del_ejemplar HAVING libro LIKE '%\",texto,\"%' OR estado_del_ejemplar LIKE '%\",texto,\"%' OR estado_fisico_del_ejemplar LIKE '%\",texto,\"%' ORDER BY \",columna,\" \",sentido,\" LIMIT \",saltar,\",\",tomar); EXECUTE stmt; DEALLOCATE PREPARE stmt; END");

        DB::unprepared("DROP PROCEDURE IF EXISTS DataTablesCantidadListarPrestamos");
        DB::unprepared("CREATE PROCEDURE DataTablesCantidadListarPrestamos(IN texto VARCHAR(50)) BEGIN PREPARE stmt FROM CONCAT(\"SELECT COUNT(prestamos.id) AS cantidad FROM prestamos INNER JOIN estados_de_los_prestamos ON estados_de_los_prestamos.id = prestamos.estado_del_prestamo_id INNER JOIN usuarios AS reader ON reader.id = prestamos.lector_id INNER JOIN usuarios AS librarian ON librarian.id = prestamos.bibliotecario_id INNER JOIN ejemplares ON ejemplares.id = prestamos.ejemplar_id INNER JOIN libros ON libros.id = ejemplares.libro_id LEFT JOIN ejemplares_x_estados_fisicos_de_los_ejemplares ON ejemplares_x_estados_fisicos_de_los_ejemplares.ejemplar_id = ejemplares.id LEFT JOIN estados_fisicos_de_los_ejemplares ON estados_fisicos_de_los_ejemplares.id = ejemplares_x_estados_fisicos_de_los_ejemplares.estado_fisico_del_ejemplar_id WHERE CONCAT( reader.name, ' ', reader.last_name ) LIKE '%\",texto,\"%' OR CONCAT(ejemplares.libro_id,'-',ejemplares.id,' ',libros.titulo) LIKE '%\",texto,\"%' OR estados_de_los_prestamos.estado_del_prestamo LIKE '%\",texto,\"%' OR prestamos.fecha_prestamo LIKE '%\",texto,\"%' OR IFNULL(prestamos.fecha_devolucion, 'No Devuelto') LIKE '%\",texto,\"%'\"); EXECUTE stmt; DEALLOCATE PREPARE stmt; END");

        DB::unprepared("DROP PROCEDURE IF EXISTS DataTablesListarPrestamos");
        DB::unprepared("CREATE PROCEDURE DataTablesListarPrestamos(IN texto VARCHAR(50), IN columna VARCHAR(50), IN sentido VARCHAR(5), IN saltar INT, IN tomar INT) BEGIN PREPARE stmt FROM CONCAT(\"SELECT prestamos.id, prestamos.dias_de_prestamo, prestamos.fecha_prestamo, prestamos.fecha_devolucion, prestamos.estado_del_prestamo_id, estados_de_los_prestamos.estado_del_prestamo, prestamos.ejemplar_id, GROUP_CONCAT( DISTINCT ejemplares_x_estados_fisicos_de_los_ejemplares.estado_fisico_del_ejemplar_id ) AS estado_fisico_del_ejemplar_id, GROUP_CONCAT(DISTINCT estados_fisicos_de_los_ejemplares.estado_fisico_del_ejemplar SEPARATOR ', ') AS estado_fisico_del_ejemplar, ejemplares.libro_id, CONCAT(ejemplares.libro_id,'-',ejemplares.id,' ',libros.titulo) AS libro, prestamos.lector_id, CONCAT( reader.name, ' ', reader.last_name ) AS lector, prestamos.bibliotecario_id, CONCAT( librarian.name, ' ', librarian.last_name ) AS bibliotecario FROM prestamos INNER JOIN estados_de_los_prestamos ON estados_de_los_prestamos.id = prestamos.estado_del_prestamo_id INNER JOIN usuarios AS reader ON reader.id = prestamos.lector_id INNER JOIN usuarios AS librarian ON librarian.id = prestamos.bibliotecario_id INNER JOIN ejemplares ON ejemplares.id = prestamos.ejemplar_id INNER JOIN libros ON libros.id = ejemplares.libro_id LEFT JOIN ejemplares_x_estados_fisicos_de_los_ejemplares ON ejemplares_x_estados_fisicos_de_los_ejemplares.ejemplar_id = ejemplares.id LEFT JOIN estados_fisicos_de_los_ejemplares ON estados_fisicos_de_los_ejemplares.id = ejemplares_x_estados_fisicos_de_los_ejemplares.estado_fisico_del_ejemplar_id WHERE CONCAT( reader.name, ' ', reader.last_name ) LIKE '%\",texto,\"%' OR CONCAT(ejemplares.libro_id,'-',ejemplares.id,' ',libros.titulo) LIKE '%\",texto,\"%' OR estados_de_los_prestamos.estado_del_prestamo LIKE '%\",texto,\"%' OR prestamos.fecha_prestamo LIKE '%\",texto,\"%' OR IFNULL(prestamos.fecha_devolucion, 'No Devuelto') LIKE '%\",texto,\"%' GROUP BY id, dias_de_prestamo, fecha_prestamo, fecha_devolucion, estado_del_prestamo_id, estado_del_prestamo, ejemplar_id, libro_id, libro, lector_id, lector, bibliotecario_id, bibliotecario ORDER BY \",columna,\" \",sentido,\" LIMIT \",saltar,\",\",tomar); EXECUTE stmt; DEALLOCATE PREPARE stmt; END");

        DB::unprepared("DROP PROCEDURE IF EXISTS DataTablesCantidadListarPrestamosSinSancion");
        DB::unprepared("CREATE PROCEDURE DataTablesCantidadListarPrestamosSinSancion(IN texto VARCHAR(50)) BEGIN PREPARE stmt FROM CONCAT(\"SELECT COUNT(prestamos.id) AS cantidad FROM prestamos INNER JOIN usuarios ON usuarios.id = prestamos.lector_id INNER JOIN ejemplares ON ejemplares.id = prestamos.ejemplar_id   INNER JOIN libros ON libros.id = ejemplares.libro_id LEFT JOIN sanciones ON sanciones.id = prestamos.id WHERE sanciones.id IS NULL AND (prestamos.fecha_prestamo LIKE '%\",texto,\"%' OR CONCAT(libros.id ,'-' ,prestamos.ejemplar_id ,' ' ,libros.titulo) LIKE '%\",texto,\"%' OR CONCAT(usuarios.name,' ',usuarios.last_name) LIKE '%\",texto,\"%')\"); EXECUTE stmt; DEALLOCATE PREPARE stmt; END");

        DB::unprepared("DROP PROCEDURE IF EXISTS DataTablesListarPrestamosSinSancion");
        DB::unprepared("CREATE PROCEDURE DataTablesListarPrestamosSinSancion(IN texto VARCHAR(50), IN columna VARCHAR(50), IN sentido VARCHAR(5), IN saltar INT, IN tomar INT) BEGIN PREPARE stmt FROM CONCAT(\"SELECT prestamos.id, prestamos.fecha_prestamo, prestamos.fecha_devolucion, prestamos.ejemplar_id, CONCAT(libros.id ,'-' ,prestamos.ejemplar_id ,' ' ,libros.titulo) AS libro, prestamos.lector_id, CONCAT(usuarios.name,' ',usuarios.last_name) AS lector FROM prestamos INNER JOIN usuarios ON usuarios.id = prestamos.lector_id INNER JOIN ejemplares ON ejemplares.id = prestamos.ejemplar_id   INNER JOIN libros ON libros.id = ejemplares.libro_id LEFT JOIN sanciones ON sanciones.id = prestamos.id WHERE sanciones.id IS NULL AND (prestamos.fecha_prestamo LIKE '%\",texto,\"%' OR CONCAT(libros.id ,'-' ,prestamos.ejemplar_id ,' ' ,libros.titulo) LIKE '%\",texto,\"%' OR CONCAT(usuarios.name,' ',usuarios.last_name) LIKE '%\",texto,\"%') ORDER BY \",columna,\" \",sentido,\" LIMIT \",saltar,\",\",tomar); EXECUTE stmt; DEALLOCATE PREPARE stmt; END");

        DB::unprepared("DROP PROCEDURE IF EXISTS DataTablesCantidadListarSanciones");
        DB::unprepared("CREATE PROCEDURE DataTablesCantidadListarSanciones(IN texto VARCHAR(50)) BEGIN PREPARE stmt FROM CONCAT(\"SELECT COUNT(sanciones.id) AS cantidad FROM sanciones INNER JOIN usuarios AS reader ON reader.id = sanciones.lector_id INNER JOIN estados_de_las_sanciones ON estados_de_las_sanciones.id = sanciones.estado_de_la_sancion_id INNER JOIN tipos_de_sanciones ON tipos_de_sanciones.id = sanciones.tipo_de_sancion_id INNER JOIN prestamos ON prestamos.id = sanciones.id INNER JOIN ejemplares ON ejemplares.id = prestamos.ejemplar_id  INNER JOIN libros ON libros.id = ejemplares.libro_id WHERE CONCAT( reader.name, ' ', reader.last_name ) LIKE '%\",texto,\"%' OR CONCAT(ejemplares.libro_id,'-',ejemplares.id,' ',libros.titulo) LIKE '%\",texto,\"%' OR  estados_de_las_sanciones.estado_de_la_sancion LIKE '%\",texto,\"%' OR sanciones.fecha_inicio LIKE '%\",texto,\"%' OR sanciones.fecha_fin LIKE '%\",texto,\"%'\"); EXECUTE stmt; DEALLOCATE PREPARE stmt; END");

        DB::unprepared("DROP PROCEDURE IF EXISTS DataTablesListarSanciones");
        DB::unprepared("CREATE PROCEDURE DataTablesListarSanciones(IN texto VARCHAR(50), IN columna VARCHAR(50), IN sentido VARCHAR(5), IN saltar INT, IN tomar INT) BEGIN PREPARE stmt FROM CONCAT(\"SELECT sanciones.id, sanciones.fecha_inicio, sanciones.fecha_fin, sanciones.lector_id, CONCAT( reader.name, ' ', reader.last_name ) AS lector, sanciones.estado_de_la_sancion_id, estados_de_las_sanciones.estado_de_la_sancion , sanciones.tipo_de_sancion_id, tipos_de_sanciones.tipo_de_sancion, prestamos.ejemplar_id, ejemplares.libro_id, CONCAT(ejemplares.libro_id,'-',ejemplares.id,' ',libros.titulo) AS libro, prestamos.fecha_prestamo FROM sanciones INNER JOIN usuarios AS reader ON reader.id = sanciones.lector_id INNER JOIN estados_de_las_sanciones ON estados_de_las_sanciones.id = sanciones.estado_de_la_sancion_id INNER JOIN tipos_de_sanciones ON tipos_de_sanciones.id = sanciones.tipo_de_sancion_id INNER JOIN prestamos ON prestamos.id = sanciones.id INNER JOIN ejemplares ON ejemplares.id = prestamos.ejemplar_id  INNER JOIN libros ON libros.id = ejemplares.libro_id WHERE CONCAT( reader.name, ' ', reader.last_name ) LIKE '%\",texto,\"%' OR CONCAT(ejemplares.libro_id,'-',ejemplares.id,' ',libros.titulo) LIKE '%\",texto,\"%' OR  estados_de_las_sanciones.estado_de_la_sancion LIKE '%\",texto,\"%' OR sanciones.fecha_inicio LIKE '%\",texto,\"%' OR sanciones.fecha_fin LIKE '%\",texto,\"%' ORDER BY \",columna,\" \",sentido,\" LIMIT \",saltar,\",\",tomar); EXECUTE stmt; DEALLOCATE PREPARE stmt; END");

        DB::unprepared("DROP PROCEDURE IF EXISTS DataTablesCantidadListarReservaciones");
        DB::unprepared("CREATE PROCEDURE DataTablesCantidadListarReservaciones(IN texto VARCHAR(50)) BEGIN PREPARE stmt FROM CONCAT(\"SELECT COUNT(reservaciones.id) AS cantidad FROM reservaciones INNER JOIN usuarios ON usuarios.id = reservaciones.lector_id  INNER JOIN ejemplares ON ejemplares.id = reservaciones.ejemplar_id INNER JOIN libros ON libros.id = ejemplares.libro_id  LEFT JOIN ejemplares_x_estados_fisicos_de_los_ejemplares ON ejemplares_x_estados_fisicos_de_los_ejemplares.ejemplar_id = ejemplares.id LEFT JOIN estados_fisicos_de_los_ejemplares ON estados_fisicos_de_los_ejemplares.id = ejemplares_x_estados_fisicos_de_los_ejemplares.estado_fisico_del_ejemplar_id WHERE CONCAT(ejemplares.libro_id,'-',ejemplares.id,' ',libros.titulo) LIKE '%\",texto,\"%' OR reservaciones.fecha_de_reservacion LIKE '%\",texto,\"%' OR CONCAT( usuarios.name, ' ', usuarios.last_name ) LIKE '%\",texto,\"%' OR CONCAT(reservaciones.dias_de_prestamo, IF(reservaciones.dias_de_prestamo = 1, ' dia',' dias')) LIKE '%\",texto,\"%'\"); EXECUTE stmt; DEALLOCATE PREPARE stmt; END");

        DB::unprepared("DROP PROCEDURE IF EXISTS DataTablesListarReservaciones");
        DB::unprepared("CREATE PROCEDURE DataTablesListarReservaciones(IN texto VARCHAR(50), IN columna VARCHAR(50), IN sentido VARCHAR(5), IN saltar INT, IN tomar INT) BEGIN PREPARE stmt FROM CONCAT(\"SELECT reservaciones.id, reservaciones.dias_de_prestamo,  reservaciones.fecha_de_reservacion, reservaciones.ejemplar_id, CONCAT(ejemplares.libro_id,'-',ejemplares.id,' ',libros.titulo) AS libro, GROUP_CONCAT( DISTINCT ejemplares_x_estados_fisicos_de_los_ejemplares.estado_fisico_del_ejemplar_id ) AS estado_fisico_del_ejemplar_id, GROUP_CONCAT(DISTINCT estados_fisicos_de_los_ejemplares.estado_fisico_del_ejemplar SEPARATOR ', ') AS estado_fisico_del_ejemplar, reservaciones.lector_id, CONCAT( usuarios.name, ' ', usuarios.last_name ) AS lector FROM reservaciones INNER JOIN usuarios ON usuarios.id = reservaciones.lector_id  INNER JOIN ejemplares ON ejemplares.id = reservaciones.ejemplar_id INNER JOIN libros ON libros.id = ejemplares.libro_id  LEFT JOIN ejemplares_x_estados_fisicos_de_los_ejemplares ON ejemplares_x_estados_fisicos_de_los_ejemplares.ejemplar_id = ejemplares.id LEFT JOIN estados_fisicos_de_los_ejemplares ON estados_fisicos_de_los_ejemplares.id = ejemplares_x_estados_fisicos_de_los_ejemplares.estado_fisico_del_ejemplar_id WHERE CONCAT(ejemplares.libro_id,'-',ejemplares.id,' ',libros.titulo) LIKE '%\",texto,\"%' OR reservaciones.fecha_de_reservacion LIKE '%\",texto,\"%' OR CONCAT( usuarios.name, ' ', usuarios.last_name ) LIKE '%\",texto,\"%' OR CONCAT(reservaciones.dias_de_prestamo, IF(reservaciones.dias_de_prestamo = 1, ' dia',' dias')) LIKE '%\",texto,\"%' GROUP BY id, dias_de_prestamo, fecha_de_reservacion, ejemplar_id, libro_id, libro, lector_id, lector ORDER BY \",columna,\" \",sentido,\" LIMIT \",saltar,\",\",tomar); EXECUTE stmt; DEALLOCATE PREPARE stmt; END");

        DB::unprepared("DROP PROCEDURE IF EXISTS DataTablesCantidadListarReservacionesDeUnUsuario");
        DB::unprepared("CREATE PROCEDURE DataTablesCantidadListarReservacionesDeUnUsuario(IN usuario_id INT, IN texto VARCHAR(50)) BEGIN PREPARE stmt FROM CONCAT(\"SELECT COUNT(reservaciones.id) AS cantidad FROM reservaciones INNER JOIN usuarios ON usuarios.id = reservaciones.lector_id  INNER JOIN ejemplares ON ejemplares.id = reservaciones.ejemplar_id INNER JOIN libros ON libros.id = ejemplares.libro_id  LEFT JOIN ejemplares_x_estados_fisicos_de_los_ejemplares ON ejemplares_x_estados_fisicos_de_los_ejemplares.ejemplar_id = ejemplares.id LEFT JOIN estados_fisicos_de_los_ejemplares ON estados_fisicos_de_los_ejemplares.id = ejemplares_x_estados_fisicos_de_los_ejemplares.estado_fisico_del_ejemplar_id WHERE lector_id = \",usuario_id,\" AND (CONCAT(ejemplares.libro_id,'-',ejemplares.id,' ',libros.titulo) LIKE '%\",texto,\"%' OR reservaciones.fecha_de_reservacion LIKE '%\",texto,\"%' OR CONCAT(reservaciones.dias_de_prestamo, IF(reservaciones.dias_de_prestamo = 1, ' dia',' dias')) LIKE '%\",texto,\"%')\"); EXECUTE stmt; DEALLOCATE PREPARE stmt; END");

        DB::unprepared("DROP PROCEDURE IF EXISTS DataTablesListarReservacionesDeUnUsuario");
        DB::unprepared("CREATE PROCEDURE DataTablesListarReservacionesDeUnUsuario(IN usuario_id INT, IN texto VARCHAR(50), IN columna VARCHAR(50), IN sentido VARCHAR(5), IN saltar INT, IN tomar INT) BEGIN PREPARE stmt FROM CONCAT(\"SELECT reservaciones.id, reservaciones.dias_de_prestamo,  reservaciones.fecha_de_reservacion, reservaciones.ejemplar_id, CONCAT(ejemplares.libro_id,'-',ejemplares.id,' ',libros.titulo) AS libro, GROUP_CONCAT( DISTINCT ejemplares_x_estados_fisicos_de_los_ejemplares.estado_fisico_del_ejemplar_id ) AS estado_fisico_del_ejemplar_id, GROUP_CONCAT(DISTINCT estados_fisicos_de_los_ejemplares.estado_fisico_del_ejemplar SEPARATOR ', ') AS estado_fisico_del_ejemplar, reservaciones.lector_id, CONCAT( usuarios.name, ' ', usuarios.last_name ) AS lector FROM reservaciones INNER JOIN usuarios ON usuarios.id = reservaciones.lector_id  INNER JOIN ejemplares ON ejemplares.id = reservaciones.ejemplar_id INNER JOIN libros ON libros.id = ejemplares.libro_id  LEFT JOIN ejemplares_x_estados_fisicos_de_los_ejemplares ON ejemplares_x_estados_fisicos_de_los_ejemplares.ejemplar_id = ejemplares.id LEFT JOIN estados_fisicos_de_los_ejemplares ON estados_fisicos_de_los_ejemplares.id = ejemplares_x_estados_fisicos_de_los_ejemplares.estado_fisico_del_ejemplar_id WHERE lector_id = \",usuario_id,\" AND (CONCAT(ejemplares.libro_id,'-',ejemplares.id,' ',libros.titulo) LIKE '%\",texto,\"%' OR reservaciones.fecha_de_reservacion LIKE '%\",texto,\"%' OR CONCAT(reservaciones.dias_de_prestamo, IF(reservaciones.dias_de_prestamo = 1, ' dia',' dias')) LIKE '%\",texto,\"%') GROUP BY id, dias_de_prestamo, fecha_de_reservacion, ejemplar_id, libro_id, libro, lector_id, lector ORDER BY \",columna,\" \",sentido,\" LIMIT \",saltar,\",\",tomar); EXECUTE stmt; DEALLOCATE PREPARE stmt; END");
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        //
    }
}
